{"ast":null,"code":"import { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\nconst propEventHandlers = [\"AnimationStart\", \"AnimationComplete\", \"Update\", \"BeforeLayoutMeasure\", \"LayoutMeasure\", \"LayoutAnimationStart\", \"LayoutAnimationComplete\"];\nconst numVariantProps = variantProps.length;\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\n\nclass VisualElement {\n  /**\n   * This method takes React props and returns found MotionValues. For example, HTML\n   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n   *\n   * This isn't an abstract method as it needs calling in the constructor, but it is\n   * intended to be one.\n   */\n  scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n    return {};\n  }\n\n  constructor(_ref) {\n    let {\n      parent,\n      props,\n      presenceContext,\n      reducedMotionConfig,\n      blockInitialAnimation,\n      visualState\n    } = _ref;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /**\n     * If true, will-change will be applied to the element. Only HTMLVisualElements\n     * currently support this.\n     */\n    this.applyWillChange = false;\n\n    this.resolveKeyframes = (keyframes, // We use an onComplete callback here rather than a Promise as a Promise\n    // resolution is a microtask and we want to retain the ability to force\n    // the resolution of keyframes synchronously.\n    onComplete, name, value) => {\n      return new this.KeyframeResolver(keyframes, onComplete, name, value, this);\n    };\n    /**\n     * A reference to the current underlying Instance, e.g. a HTMLElement\n     * or Three.Mesh etc.\n     */\n\n\n    this.current = null;\n    /**\n     * A set containing references to this VisualElement's children.\n     */\n\n    this.children = new Set();\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n\n    this.isVariantNode = false;\n    this.isControllingVariants = false;\n    /**\n     * Decides whether this VisualElement should animate in reduced motion\n     * mode.\n     *\n     * TODO: This is currently set on every individual VisualElement but feels\n     * like it could be set globally.\n     */\n\n    this.shouldReduceMotion = null;\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n\n    this.values = new Map();\n    this.KeyframeResolver = KeyframeResolver;\n    /**\n     * Cleanup functions for active features (hover/tap/exit etc)\n     */\n\n    this.features = {};\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n\n    this.valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n\n    this.prevMotionValues = {};\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n\n    this.events = {};\n    /**\n     * An object containing an unsubscribe function for each prop event subscription.\n     * For example, every \"Update\" event can have multiple subscribers via\n     * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n     */\n\n    this.propEventSubscriptions = {};\n\n    this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n\n    this.render = () => {\n      this.isRenderScheduled = false;\n      if (!this.current) return;\n      this.triggerBuild();\n      this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n    };\n\n    this.isRenderScheduled = false;\n\n    this.scheduleRender = () => {\n      if (!this.isRenderScheduled) {\n        this.isRenderScheduled = true;\n        frame.render(this.render, false, true);\n      }\n    };\n\n    const {\n      latestValues,\n      renderState\n    } = visualState;\n    this.latestValues = latestValues;\n    this.baseTarget = { ...latestValues\n    };\n    this.initialValues = props.initial ? { ...latestValues\n    } : {};\n    this.renderState = renderState;\n    this.parent = parent;\n    this.props = props;\n    this.presenceContext = presenceContext;\n    this.depth = parent ? parent.depth + 1 : 0;\n    this.reducedMotionConfig = reducedMotionConfig;\n    this.options = options;\n    this.blockInitialAnimation = Boolean(blockInitialAnimation);\n    this.isControllingVariants = isControllingVariants(props);\n    this.isVariantNode = isVariantNode(props);\n\n    if (this.isVariantNode) {\n      this.variantChildren = new Set();\n    }\n\n    this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n\n    const {\n      willChange,\n      ...initialMotionValues\n    } = this.scrapeMotionValuesFromProps(props, {}, this);\n\n    for (const key in initialMotionValues) {\n      const value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n      }\n    }\n  }\n\n  mount(instance) {\n    this.current = instance;\n    visualElementStore.set(instance, this);\n\n    if (this.projection && !this.projection.instance) {\n      this.projection.mount(instance);\n    }\n\n    if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n      this.removeFromVariantTree = this.parent.addVariantChild(this);\n    }\n\n    this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n\n    if (!hasReducedMotionListener.current) {\n      initPrefersReducedMotion();\n    }\n\n    this.shouldReduceMotion = this.reducedMotionConfig === \"never\" ? false : this.reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n    }\n\n    if (this.parent) this.parent.children.add(this);\n    this.update(this.props, this.presenceContext);\n  }\n\n  unmount() {\n    visualElementStore.delete(this.current);\n    this.projection && this.projection.unmount();\n    cancelFrame(this.notifyUpdate);\n    cancelFrame(this.render);\n    this.valueSubscriptions.forEach(remove => remove());\n    this.removeFromVariantTree && this.removeFromVariantTree();\n    this.parent && this.parent.children.delete(this);\n\n    for (const key in this.events) {\n      this.events[key].clear();\n    }\n\n    for (const key in this.features) {\n      const feature = this.features[key];\n\n      if (feature) {\n        feature.unmount();\n        feature.isMounted = false;\n      }\n    }\n\n    this.current = null;\n  }\n\n  bindToMotionValue(key, value) {\n    const valueIsTransform = transformProps.has(key);\n    const removeOnChange = value.on(\"change\", latestValue => {\n      this.latestValues[key] = latestValue;\n      this.props.onUpdate && frame.preRender(this.notifyUpdate);\n\n      if (valueIsTransform && this.projection) {\n        this.projection.isTransformDirty = true;\n      }\n    });\n    const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n    this.valueSubscriptions.set(key, () => {\n      removeOnChange();\n      removeOnRenderRequest();\n      if (value.owner) value.stop();\n    });\n  }\n\n  sortNodePosition(other) {\n    /**\n     * If these nodes aren't even of the same type we can't compare their depth.\n     */\n    if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {\n      return 0;\n    }\n\n    return this.sortInstanceNodePosition(this.current, other.current);\n  }\n\n  updateFeatures() {\n    let key = \"animation\";\n\n    for (key in featureDefinitions) {\n      const featureDefinition = featureDefinitions[key];\n      if (!featureDefinition) continue;\n      const {\n        isEnabled,\n        Feature: FeatureConstructor\n      } = featureDefinition;\n      /**\n       * If this feature is enabled but not active, make a new instance.\n       */\n\n      if (!this.features[key] && FeatureConstructor && isEnabled(this.props)) {\n        this.features[key] = new FeatureConstructor(this);\n      }\n      /**\n       * If we have a feature, mount or update it.\n       */\n\n\n      if (this.features[key]) {\n        const feature = this.features[key];\n\n        if (feature.isMounted) {\n          feature.update();\n        } else {\n          feature.mount();\n          feature.isMounted = true;\n        }\n      }\n    }\n  }\n\n  triggerBuild() {\n    this.build(this.renderState, this.latestValues, this.props);\n  }\n  /**\n   * Measure the current viewport box with or without transforms.\n   * Only measures axis-aligned boxes, rotate and skew must be manually\n   * removed with a re-render to work.\n   */\n\n\n  measureViewportBox() {\n    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();\n  }\n\n  getStaticValue(key) {\n    return this.latestValues[key];\n  }\n\n  setStaticValue(key, value) {\n    this.latestValues[key] = value;\n  }\n  /**\n   * Update the provided props. Ensure any newly-added motion values are\n   * added to our map, old ones removed, and listeners updated.\n   */\n\n\n  update(props, presenceContext) {\n    if (props.transformTemplate || this.props.transformTemplate) {\n      this.scheduleRender();\n    }\n\n    this.prevProps = this.props;\n    this.props = props;\n    this.prevPresenceContext = this.presenceContext;\n    this.presenceContext = presenceContext;\n    /**\n     * Update prop event handlers ie onAnimationStart, onAnimationComplete\n     */\n\n    for (let i = 0; i < propEventHandlers.length; i++) {\n      const key = propEventHandlers[i];\n\n      if (this.propEventSubscriptions[key]) {\n        this.propEventSubscriptions[key]();\n        delete this.propEventSubscriptions[key];\n      }\n\n      const listenerName = \"on\" + key;\n      const listener = props[listenerName];\n\n      if (listener) {\n        this.propEventSubscriptions[key] = this.on(key, listener);\n      }\n    }\n\n    this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n\n    if (this.handleChildMotionValue) {\n      this.handleChildMotionValue();\n    }\n  }\n\n  getProps() {\n    return this.props;\n  }\n  /**\n   * Returns the variant definition with a given name.\n   */\n\n\n  getVariant(name) {\n    return this.props.variants ? this.props.variants[name] : undefined;\n  }\n  /**\n   * Returns the defined default transition on this component.\n   */\n\n\n  getDefaultTransition() {\n    return this.props.transition;\n  }\n\n  getTransformPagePoint() {\n    return this.props.transformPagePoint;\n  }\n\n  getClosestVariantNode() {\n    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : undefined;\n  }\n\n  getVariantContext() {\n    let startAtParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (startAtParent) {\n      return this.parent ? this.parent.getVariantContext() : undefined;\n    }\n\n    if (!this.isControllingVariants) {\n      const context = this.parent ? this.parent.getVariantContext() || {} : {};\n\n      if (this.props.initial !== undefined) {\n        context.initial = this.props.initial;\n      }\n\n      return context;\n    }\n\n    const context = {};\n\n    for (let i = 0; i < numVariantProps; i++) {\n      const name = variantProps[i];\n      const prop = this.props[name];\n\n      if (isVariantLabel(prop) || prop === false) {\n        context[name] = prop;\n      }\n    }\n\n    return context;\n  }\n  /**\n   * Add a child visual element to our set of children.\n   */\n\n\n  addVariantChild(child) {\n    const closestVariantNode = this.getClosestVariantNode();\n\n    if (closestVariantNode) {\n      closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);\n      return () => closestVariantNode.variantChildren.delete(child);\n    }\n  }\n  /**\n   * Add a motion value and bind it to this visual element.\n   */\n\n\n  addValue(key, value) {\n    // Remove existing value if it exists\n    const existingValue = this.values.get(key);\n\n    if (value !== existingValue) {\n      if (existingValue) this.removeValue(key);\n      this.bindToMotionValue(key, value);\n      this.values.set(key, value);\n      this.latestValues[key] = value.get();\n    }\n  }\n  /**\n   * Remove a motion value and unbind any active subscriptions.\n   */\n\n\n  removeValue(key) {\n    this.values.delete(key);\n    const unsubscribe = this.valueSubscriptions.get(key);\n\n    if (unsubscribe) {\n      unsubscribe();\n      this.valueSubscriptions.delete(key);\n    }\n\n    delete this.latestValues[key];\n    this.removeValueFromRenderState(key, this.renderState);\n  }\n  /**\n   * Check whether we have a motion value for this key\n   */\n\n\n  hasValue(key) {\n    return this.values.has(key);\n  }\n\n  getValue(key, defaultValue) {\n    if (this.props.values && this.props.values[key]) {\n      return this.props.values[key];\n    }\n\n    let value = this.values.get(key);\n\n    if (value === undefined && defaultValue !== undefined) {\n      value = motionValue(defaultValue === null ? undefined : defaultValue, {\n        owner: this\n      });\n      this.addValue(key, value);\n    }\n\n    return value;\n  }\n  /**\n   * If we're trying to animate to a previously unencountered value,\n   * we need to check for it in our state and as a last resort read it\n   * directly from the instance (which might have performance implications).\n   */\n\n\n  readValue(key, target) {\n    var _a;\n\n    let value = this.latestValues[key] !== undefined || !this.current ? this.latestValues[key] : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n\n    if (value !== undefined && value !== null) {\n      if (typeof value === \"string\" && (isNumericalString(value) || isZeroValueString(value))) {\n        // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n        value = parseFloat(value);\n      } else if (!findValueType(value) && complex.test(target)) {\n        value = getAnimatableNone(key, target);\n      }\n\n      this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n    }\n\n    return isMotionValue(value) ? value.get() : value;\n  }\n  /**\n   * Set the base target to later animate back to. This is currently\n   * only hydrated on creation and when we first read a value.\n   */\n\n\n  setBaseTarget(key, value) {\n    this.baseTarget[key] = value;\n  }\n  /**\n   * Find the base target for a value thats been removed from all animation\n   * props.\n   */\n\n\n  getBaseTarget(key) {\n    var _a;\n\n    const {\n      initial\n    } = this.props;\n    let valueFromInitial;\n\n    if (typeof initial === \"string\" || typeof initial === \"object\") {\n      const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n\n      if (variant) {\n        valueFromInitial = variant[key];\n      }\n    }\n    /**\n     * If this value still exists in the current initial variant, read that.\n     */\n\n\n    if (initial && valueFromInitial !== undefined) {\n      return valueFromInitial;\n    }\n    /**\n     * Alternatively, if this VisualElement config has defined a getBaseTarget\n     * so we can read the value from an alternative source, try that.\n     */\n\n\n    const target = this.getBaseTargetFromProps(this.props, key);\n    if (target !== undefined && !isMotionValue(target)) return target;\n    /**\n     * If the value was initially defined on initial, but it doesn't any more,\n     * return undefined. Otherwise return the value as initially read from the DOM.\n     */\n\n    return this.initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : this.baseTarget[key];\n  }\n\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = new SubscriptionManager();\n    }\n\n    return this.events[eventName].add(callback);\n  }\n\n  notify(eventName) {\n    if (this.events[eventName]) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      this.events[eventName].notify(...args);\n    }\n  }\n\n}\n\nexport { VisualElement };","map":{"version":3,"sources":["C:/Users/74760/Desktop/VScode/React/Portfolio/node_modules/framer-motion/dist/es/render/VisualElement.mjs"],"names":["initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","SubscriptionManager","motionValue","isMotionValue","transformProps","isControllingVariants","isVariantNode","isVariantLabel","updateMotionValuesFromProps","resolveVariantFromProps","warnOnce","featureDefinitions","variantProps","visualElementStore","KeyframeResolver","isNumericalString","isZeroValueString","findValueType","complex","getAnimatableNone","createBox","frame","cancelFrame","propEventHandlers","numVariantProps","length","VisualElement","scrapeMotionValuesFromProps","_props","_prevProps","_visualElement","constructor","parent","props","presenceContext","reducedMotionConfig","blockInitialAnimation","visualState","options","applyWillChange","resolveKeyframes","keyframes","onComplete","name","value","current","children","Set","shouldReduceMotion","values","Map","features","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","notify","latestValues","render","isRenderScheduled","triggerBuild","renderInstance","renderState","style","projection","scheduleRender","baseTarget","initialValues","initial","depth","Boolean","variantChildren","manuallyAnimateOnMount","willChange","initialMotionValues","key","undefined","set","mount","instance","removeFromVariantTree","addVariantChild","forEach","bindToMotionValue","process","env","NODE_ENV","add","update","unmount","delete","remove","clear","feature","isMounted","valueIsTransform","has","removeOnChange","on","latestValue","onUpdate","preRender","isTransformDirty","removeOnRenderRequest","owner","stop","sortNodePosition","other","sortInstanceNodePosition","type","updateFeatures","featureDefinition","isEnabled","Feature","FeatureConstructor","build","measureViewportBox","measureInstanceViewportBox","getStaticValue","setStaticValue","transformTemplate","prevProps","prevPresenceContext","i","listenerName","listener","handleChildMotionValue","getProps","getVariant","variants","getDefaultTransition","transition","getTransformPagePoint","transformPagePoint","getClosestVariantNode","getVariantContext","startAtParent","context","prop","child","closestVariantNode","addValue","existingValue","get","removeValue","unsubscribe","removeValueFromRenderState","hasValue","getValue","defaultValue","readValue","target","_a","getBaseTargetFromProps","readValueFromInstance","parseFloat","test","setBaseTarget","getBaseTarget","valueFromInitial","variant","custom","eventName","callback","args"],"mappings":"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","sourcesContent":["import { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\nconst numVariantProps = variantProps.length;\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n        return {};\n    }\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {\n        /**\n         * If true, will-change will be applied to the element. Only HTMLVisualElements\n         * currently support this.\n         */\n        this.applyWillChange = false;\n        this.resolveKeyframes = (keyframes, \n        // We use an onComplete callback here rather than a Promise as a Promise\n        // resolution is a microtask and we want to retain the ability to force\n        // the resolution of keyframes synchronously.\n        onComplete, name, value) => {\n            return new this.KeyframeResolver(keyframes, onComplete, name, value, this);\n        };\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        this.KeyframeResolver = KeyframeResolver;\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            this.isRenderScheduled = false;\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.isRenderScheduled = false;\n        this.scheduleRender = () => {\n            if (!this.isRenderScheduled) {\n                this.isRenderScheduled = true;\n                frame.render(this.render, false, true);\n            }\n        };\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature) {\n                feature.unmount();\n                feature.isMounted = false;\n            }\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n            if (value.owner)\n                value.stop();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    updateFeatures() {\n        let key = \"animation\";\n        for (key in featureDefinitions) {\n            const featureDefinition = featureDefinitions[key];\n            if (!featureDefinition)\n                continue;\n            const { isEnabled, Feature: FeatureConstructor } = featureDefinition;\n            /**\n             * If this feature is enabled but not active, make a new instance.\n             */\n            if (!this.features[key] &&\n                FeatureConstructor &&\n                isEnabled(this.props)) {\n                this.features[key] = new FeatureConstructor(this);\n            }\n            /**\n             * If we have a feature, mount or update it.\n             */\n            if (this.features[key]) {\n                const feature = this.features[key];\n                if (feature.isMounted) {\n                    feature.update();\n                }\n                else {\n                    feature.mount();\n                    feature.isMounted = true;\n                }\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listenerName = (\"on\" + key);\n            const listener = props[listenerName];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent\n                ? this.parent.getVariantContext() || {}\n                : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        const existingValue = this.values.get(key);\n        if (value !== existingValue) {\n            if (existingValue)\n                this.removeValue(key);\n            this.bindToMotionValue(key, value);\n            this.values.set(key, value);\n            this.latestValues[key] = value.get();\n        }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key, target) {\n        var _a;\n        let value = this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n        if (value !== undefined && value !== null) {\n            if (typeof value === \"string\" &&\n                (isNumericalString(value) || isZeroValueString(value))) {\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n                value = parseFloat(value);\n            }\n            else if (!findValueType(value) && complex.test(target)) {\n                value = getAnimatableNone(key, target);\n            }\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n        }\n        return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        let valueFromInitial;\n        if (typeof initial === \"string\" || typeof initial === \"object\") {\n            const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n            if (variant) {\n                valueFromInitial = variant[key];\n            }\n        }\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n"]},"metadata":{},"sourceType":"module"}