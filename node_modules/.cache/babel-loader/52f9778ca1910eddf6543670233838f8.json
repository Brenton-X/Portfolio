{"ast":null,"code":"import { buildTransform } from './build-transform.mjs';\nimport { isCSSVariableName } from '../../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nfunction buildHTMLStyles(state, latestValues, transformTemplate) {\n  const {\n    style,\n    vars,\n    transform,\n    transformOrigin\n  } = state; // Track whether we encounter any transform or transformOrigin values.\n\n  let hasTransform = false;\n  let hasTransformOrigin = false; // Does the calculated transform essentially equal \"none\"?\n\n  let transformIsNone = true;\n  /**\n   * Loop over all our latest animated values and decide whether to handle them\n   * as a style or CSS variable.\n   *\n   * Transforms and transform origins are kept seperately for further processing.\n   */\n\n  for (const key in latestValues) {\n    const value = latestValues[key];\n    /**\n     * If this is a CSS variable we don't do any further processing.\n     */\n\n    if (isCSSVariableName(key)) {\n      vars[key] = value;\n      continue;\n    } // Convert the value to its default value type, ie 0 -> \"0px\"\n\n\n    const valueType = numberValueTypes[key];\n    const valueAsType = getValueAsType(value, valueType);\n\n    if (transformProps.has(key)) {\n      // If this is a transform, flag to enable further transform processing\n      hasTransform = true;\n      transform[key] = valueAsType; // If we already know we have a non-default transform, early return\n\n      if (!transformIsNone) continue; // Otherwise check to see if this is a default transform\n\n      if (value !== (valueType.default || 0)) transformIsNone = false;\n    } else if (key.startsWith(\"origin\")) {\n      // If this is a transform origin, flag and enable further transform-origin processing\n      hasTransformOrigin = true;\n      transformOrigin[key] = valueAsType;\n    } else {\n      style[key] = valueAsType;\n    }\n  }\n\n  if (!latestValues.transform) {\n    if (hasTransform || transformTemplate) {\n      style.transform = buildTransform(state.transform, transformIsNone, transformTemplate);\n    } else if (style.transform) {\n      /**\n       * If we have previously created a transform but currently don't have any,\n       * reset transform style to none.\n       */\n      style.transform = \"none\";\n    }\n  }\n  /**\n   * Build a transformOrigin style. Uses the same defaults as the browser for\n   * undefined origins.\n   */\n\n\n  if (hasTransformOrigin) {\n    const {\n      originX = \"50%\",\n      originY = \"50%\",\n      originZ = 0\n    } = transformOrigin;\n    style.transformOrigin = `${originX} ${originY} ${originZ}`;\n  }\n}\n\nexport { buildHTMLStyles };","map":{"version":3,"sources":["C:/Users/74760/Desktop/VScode/React/Portfolio/node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs"],"names":["buildTransform","isCSSVariableName","transformProps","getValueAsType","numberValueTypes","buildHTMLStyles","state","latestValues","transformTemplate","style","vars","transform","transformOrigin","hasTransform","hasTransformOrigin","transformIsNone","key","value","valueType","valueAsType","has","default","startsWith","originX","originY","originZ"],"mappings":"AAAA,SAASA,cAAT,QAA+B,uBAA/B;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,SAASC,gBAAT,QAAiC,kCAAjC;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,YAAhC,EAA8CC,iBAA9C,EAAiE;AAC7D,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA,SAAf;AAA0BC,IAAAA;AAA1B,MAA8CN,KAApD,CAD6D,CAE7D;;AACA,MAAIO,YAAY,GAAG,KAAnB;AACA,MAAIC,kBAAkB,GAAG,KAAzB,CAJ6D,CAK7D;;AACA,MAAIC,eAAe,GAAG,IAAtB;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,OAAK,MAAMC,GAAX,IAAkBT,YAAlB,EAAgC;AAC5B,UAAMU,KAAK,GAAGV,YAAY,CAACS,GAAD,CAA1B;AACA;AACR;AACA;;AACQ,QAAIf,iBAAiB,CAACe,GAAD,CAArB,EAA4B;AACxBN,MAAAA,IAAI,CAACM,GAAD,CAAJ,GAAYC,KAAZ;AACA;AACH,KAR2B,CAS5B;;;AACA,UAAMC,SAAS,GAAGd,gBAAgB,CAACY,GAAD,CAAlC;AACA,UAAMG,WAAW,GAAGhB,cAAc,CAACc,KAAD,EAAQC,SAAR,CAAlC;;AACA,QAAIhB,cAAc,CAACkB,GAAf,CAAmBJ,GAAnB,CAAJ,EAA6B;AACzB;AACAH,MAAAA,YAAY,GAAG,IAAf;AACAF,MAAAA,SAAS,CAACK,GAAD,CAAT,GAAiBG,WAAjB,CAHyB,CAIzB;;AACA,UAAI,CAACJ,eAAL,EACI,SANqB,CAOzB;;AACA,UAAIE,KAAK,MAAMC,SAAS,CAACG,OAAV,IAAqB,CAA3B,CAAT,EACIN,eAAe,GAAG,KAAlB;AACP,KAVD,MAWK,IAAIC,GAAG,CAACM,UAAJ,CAAe,QAAf,CAAJ,EAA8B;AAC/B;AACAR,MAAAA,kBAAkB,GAAG,IAArB;AACAF,MAAAA,eAAe,CAACI,GAAD,CAAf,GAAuBG,WAAvB;AACH,KAJI,MAKA;AACDV,MAAAA,KAAK,CAACO,GAAD,CAAL,GAAaG,WAAb;AACH;AACJ;;AACD,MAAI,CAACZ,YAAY,CAACI,SAAlB,EAA6B;AACzB,QAAIE,YAAY,IAAIL,iBAApB,EAAuC;AACnCC,MAAAA,KAAK,CAACE,SAAN,GAAkBX,cAAc,CAACM,KAAK,CAACK,SAAP,EAAkBI,eAAlB,EAAmCP,iBAAnC,CAAhC;AACH,KAFD,MAGK,IAAIC,KAAK,CAACE,SAAV,EAAqB;AACtB;AACZ;AACA;AACA;AACYF,MAAAA,KAAK,CAACE,SAAN,GAAkB,MAAlB;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AACI,MAAIG,kBAAJ,EAAwB;AACpB,UAAM;AAAES,MAAAA,OAAO,GAAG,KAAZ;AAAmBC,MAAAA,OAAO,GAAG,KAA7B;AAAoCC,MAAAA,OAAO,GAAG;AAA9C,QAAqDb,eAA3D;AACAH,IAAAA,KAAK,CAACG,eAAN,GAAyB,GAAEW,OAAQ,IAAGC,OAAQ,IAAGC,OAAQ,EAAzD;AACH;AACJ;;AAED,SAASpB,eAAT","sourcesContent":["import { buildTransform } from './build-transform.mjs';\nimport { isCSSVariableName } from '../../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nfunction buildHTMLStyles(state, latestValues, transformTemplate) {\n    const { style, vars, transform, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    // Does the calculated transform essentially equal \"none\"?\n    let transformIsNone = true;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept seperately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        /**\n         * If this is a CSS variable we don't do any further processing.\n         */\n        if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        // Convert the value to its default value type, ie 0 -> \"0px\"\n        const valueType = numberValueTypes[key];\n        const valueAsType = getValueAsType(value, valueType);\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            transform[key] = valueAsType;\n            // If we already know we have a non-default transform, early return\n            if (!transformIsNone)\n                continue;\n            // Otherwise check to see if this is a default transform\n            if (value !== (valueType.default || 0))\n                transformIsNone = false;\n        }\n        else if (key.startsWith(\"origin\")) {\n            // If this is a transform origin, flag and enable further transform-origin processing\n            hasTransformOrigin = true;\n            transformOrigin[key] = valueAsType;\n        }\n        else {\n            style[key] = valueAsType;\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(state.transform, transformIsNone, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n"]},"metadata":{},"sourceType":"module"}