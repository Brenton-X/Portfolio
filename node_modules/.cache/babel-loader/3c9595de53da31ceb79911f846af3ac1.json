{"ast":null,"code":"import { transformPropOrder } from './transform.mjs';\nconst translateAlias = {\n  x: \"translateX\",\n  y: \"translateY\",\n  z: \"translateZ\",\n  transformPerspective: \"perspective\"\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\n\nfunction buildTransform(transform, transformIsDefault, transformTemplate) {\n  // The transform string we're going to build into.\n  let transformString = \"\";\n  /**\n   * Loop over all possible transforms in order, adding the ones that\n   * are present to the transform string.\n   */\n\n  for (let i = 0; i < numTransforms; i++) {\n    const key = transformPropOrder[i];\n\n    if (transform[key] !== undefined) {\n      const transformName = translateAlias[key] || key;\n      transformString += `${transformName}(${transform[key]}) `;\n    }\n  }\n\n  transformString = transformString.trim(); // If we have a custom `transform` template, pass our transform values and\n  // generated transformString to that before returning\n\n  if (transformTemplate) {\n    transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n  } else if (transformIsDefault) {\n    transformString = \"none\";\n  }\n\n  return transformString;\n}\n\nexport { buildTransform };","map":{"version":3,"sources":["C:/Users/74760/Desktop/VScode/React/Portfolio/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs"],"names":["transformPropOrder","translateAlias","x","y","z","transformPerspective","numTransforms","length","buildTransform","transform","transformIsDefault","transformTemplate","transformString","i","key","undefined","transformName","trim"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,iBAAnC;AAEA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,CAAC,EAAE,YADgB;AAEnBC,EAAAA,CAAC,EAAE,YAFgB;AAGnBC,EAAAA,CAAC,EAAE,YAHgB;AAInBC,EAAAA,oBAAoB,EAAE;AAJH,CAAvB;AAMA,MAAMC,aAAa,GAAGN,kBAAkB,CAACO,MAAzC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,SAAxB,EAAmCC,kBAAnC,EAAuDC,iBAAvD,EAA0E;AACtE;AACA,MAAIC,eAAe,GAAG,EAAtB;AACA;AACJ;AACA;AACA;;AACI,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,aAApB,EAAmCO,CAAC,EAApC,EAAwC;AACpC,UAAMC,GAAG,GAAGd,kBAAkB,CAACa,CAAD,CAA9B;;AACA,QAAIJ,SAAS,CAACK,GAAD,CAAT,KAAmBC,SAAvB,EAAkC;AAC9B,YAAMC,aAAa,GAAGf,cAAc,CAACa,GAAD,CAAd,IAAuBA,GAA7C;AACAF,MAAAA,eAAe,IAAK,GAAEI,aAAc,IAAGP,SAAS,CAACK,GAAD,CAAM,IAAtD;AACH;AACJ;;AACDF,EAAAA,eAAe,GAAGA,eAAe,CAACK,IAAhB,EAAlB,CAdsE,CAetE;AACA;;AACA,MAAIN,iBAAJ,EAAuB;AACnBC,IAAAA,eAAe,GAAGD,iBAAiB,CAACF,SAAD,EAAYC,kBAAkB,GAAG,EAAH,GAAQE,eAAtC,CAAnC;AACH,GAFD,MAGK,IAAIF,kBAAJ,EAAwB;AACzBE,IAAAA,eAAe,GAAG,MAAlB;AACH;;AACD,SAAOA,eAAP;AACH;;AAED,SAASJ,cAAT","sourcesContent":["import { transformPropOrder } from './transform.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(transform, transformIsDefault, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        if (transform[key] !== undefined) {\n            const transformName = translateAlias[key] || key;\n            transformString += `${transformName}(${transform[key]}) `;\n        }\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n"]},"metadata":{},"sourceType":"module"}