{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { VisualElement } from '../../render/VisualElement.mjs';\nimport { animateVisualElement } from '../interfaces/visual-element.mjs';\n\nconst createObject = () => ({});\n\nclass StateVisualElement extends VisualElement {\n  constructor() {\n    super(...arguments);\n    this.measureInstanceViewportBox = createBox;\n  }\n\n  build() {}\n\n  resetTransform() {}\n\n  restoreTransform() {}\n\n  removeValueFromRenderState() {}\n\n  renderInstance() {}\n\n  scrapeMotionValuesFromProps() {\n    return createObject();\n  }\n\n  getBaseTargetFromProps() {\n    return undefined;\n  }\n\n  readValueFromInstance(_state, key, options) {\n    return options.initialState[key] || 0;\n  }\n\n  sortInstanceNodePosition() {\n    return 0;\n  }\n\n}\n\nconst useVisualState = makeUseVisualState({\n  scrapeMotionValuesFromProps: createObject,\n  createRenderState: createObject\n});\n/**\n * This is not an officially supported API and may be removed\n * on any version.\n */\n\nfunction useAnimatedState(initialState) {\n  const [animationState, setAnimationState] = useState(initialState);\n  const visualState = useVisualState({}, false);\n  const element = useConstant(() => {\n    return new StateVisualElement({\n      props: {},\n      visualState,\n      presenceContext: null\n    }, {\n      initialState\n    });\n  });\n  useEffect(() => {\n    element.mount({});\n    return () => element.unmount();\n  }, [element]);\n  useEffect(() => {\n    element.update({\n      onUpdate: v => {\n        setAnimationState({ ...v\n        });\n      }\n    }, null);\n  }, [setAnimationState, element]);\n  const startAnimation = useConstant(() => animationDefinition => {\n    return animateVisualElement(element, animationDefinition);\n  });\n  return [animationState, startAnimation];\n}\n\nexport { useAnimatedState };","map":{"version":3,"sources":["C:/Users/74760/Desktop/VScode/React/Portfolio/node_modules/framer-motion/dist/es/animation/hooks/use-animated-state.mjs"],"names":["useState","useEffect","useConstant","makeUseVisualState","createBox","VisualElement","animateVisualElement","createObject","StateVisualElement","constructor","arguments","measureInstanceViewportBox","build","resetTransform","restoreTransform","removeValueFromRenderState","renderInstance","scrapeMotionValuesFromProps","getBaseTargetFromProps","undefined","readValueFromInstance","_state","key","options","initialState","sortInstanceNodePosition","useVisualState","createRenderState","useAnimatedState","animationState","setAnimationState","visualState","element","props","presenceContext","mount","unmount","update","onUpdate","v","startAnimation","animationDefinition"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,kBAAT,QAAmC,yCAAnC;AACA,SAASC,SAAT,QAA0B,sCAA1B;AACA,SAASC,aAAT,QAA8B,gCAA9B;AACA,SAASC,oBAAT,QAAqC,kCAArC;;AAEA,MAAMC,YAAY,GAAG,OAAO,EAAP,CAArB;;AACA,MAAMC,kBAAN,SAAiCH,aAAjC,CAA+C;AAC3CI,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,0BAAL,GAAkCP,SAAlC;AACH;;AACDQ,EAAAA,KAAK,GAAG,CAAG;;AACXC,EAAAA,cAAc,GAAG,CAAG;;AACpBC,EAAAA,gBAAgB,GAAG,CAAG;;AACtBC,EAAAA,0BAA0B,GAAG,CAAG;;AAChCC,EAAAA,cAAc,GAAG,CAAG;;AACpBC,EAAAA,2BAA2B,GAAG;AAC1B,WAAOV,YAAY,EAAnB;AACH;;AACDW,EAAAA,sBAAsB,GAAG;AACrB,WAAOC,SAAP;AACH;;AACDC,EAAAA,qBAAqB,CAACC,MAAD,EAASC,GAAT,EAAcC,OAAd,EAAuB;AACxC,WAAOA,OAAO,CAACC,YAAR,CAAqBF,GAArB,KAA6B,CAApC;AACH;;AACDG,EAAAA,wBAAwB,GAAG;AACvB,WAAO,CAAP;AACH;;AArB0C;;AAuB/C,MAAMC,cAAc,GAAGvB,kBAAkB,CAAC;AACtCc,EAAAA,2BAA2B,EAAEV,YADS;AAEtCoB,EAAAA,iBAAiB,EAAEpB;AAFmB,CAAD,CAAzC;AAIA;AACA;AACA;AACA;;AACA,SAASqB,gBAAT,CAA0BJ,YAA1B,EAAwC;AACpC,QAAM,CAACK,cAAD,EAAiBC,iBAAjB,IAAsC9B,QAAQ,CAACwB,YAAD,CAApD;AACA,QAAMO,WAAW,GAAGL,cAAc,CAAC,EAAD,EAAK,KAAL,CAAlC;AACA,QAAMM,OAAO,GAAG9B,WAAW,CAAC,MAAM;AAC9B,WAAO,IAAIM,kBAAJ,CAAuB;AAAEyB,MAAAA,KAAK,EAAE,EAAT;AAAaF,MAAAA,WAAb;AAA0BG,MAAAA,eAAe,EAAE;AAA3C,KAAvB,EAA0E;AAAEV,MAAAA;AAAF,KAA1E,CAAP;AACH,GAF0B,CAA3B;AAGAvB,EAAAA,SAAS,CAAC,MAAM;AACZ+B,IAAAA,OAAO,CAACG,KAAR,CAAc,EAAd;AACA,WAAO,MAAMH,OAAO,CAACI,OAAR,EAAb;AACH,GAHQ,EAGN,CAACJ,OAAD,CAHM,CAAT;AAIA/B,EAAAA,SAAS,CAAC,MAAM;AACZ+B,IAAAA,OAAO,CAACK,MAAR,CAAe;AACXC,MAAAA,QAAQ,EAAGC,CAAD,IAAO;AACbT,QAAAA,iBAAiB,CAAC,EAAE,GAAGS;AAAL,SAAD,CAAjB;AACH;AAHU,KAAf,EAIG,IAJH;AAKH,GANQ,EAMN,CAACT,iBAAD,EAAoBE,OAApB,CANM,CAAT;AAOA,QAAMQ,cAAc,GAAGtC,WAAW,CAAC,MAAOuC,mBAAD,IAAyB;AAC9D,WAAOnC,oBAAoB,CAAC0B,OAAD,EAAUS,mBAAV,CAA3B;AACH,GAFiC,CAAlC;AAGA,SAAO,CAACZ,cAAD,EAAiBW,cAAjB,CAAP;AACH;;AAED,SAASZ,gBAAT","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { VisualElement } from '../../render/VisualElement.mjs';\nimport { animateVisualElement } from '../interfaces/visual-element.mjs';\n\nconst createObject = () => ({});\nclass StateVisualElement extends VisualElement {\n    constructor() {\n        super(...arguments);\n        this.measureInstanceViewportBox = createBox;\n    }\n    build() { }\n    resetTransform() { }\n    restoreTransform() { }\n    removeValueFromRenderState() { }\n    renderInstance() { }\n    scrapeMotionValuesFromProps() {\n        return createObject();\n    }\n    getBaseTargetFromProps() {\n        return undefined;\n    }\n    readValueFromInstance(_state, key, options) {\n        return options.initialState[key] || 0;\n    }\n    sortInstanceNodePosition() {\n        return 0;\n    }\n}\nconst useVisualState = makeUseVisualState({\n    scrapeMotionValuesFromProps: createObject,\n    createRenderState: createObject,\n});\n/**\n * This is not an officially supported API and may be removed\n * on any version.\n */\nfunction useAnimatedState(initialState) {\n    const [animationState, setAnimationState] = useState(initialState);\n    const visualState = useVisualState({}, false);\n    const element = useConstant(() => {\n        return new StateVisualElement({ props: {}, visualState, presenceContext: null }, { initialState });\n    });\n    useEffect(() => {\n        element.mount({});\n        return () => element.unmount();\n    }, [element]);\n    useEffect(() => {\n        element.update({\n            onUpdate: (v) => {\n                setAnimationState({ ...v });\n            },\n        }, null);\n    }, [setAnimationState, element]);\n    const startAnimation = useConstant(() => (animationDefinition) => {\n        return animateVisualElement(element, animationDefinition);\n    });\n    return [animationState, startAnimation];\n}\n\nexport { useAnimatedState };\n"]},"metadata":{},"sourceType":"module"}