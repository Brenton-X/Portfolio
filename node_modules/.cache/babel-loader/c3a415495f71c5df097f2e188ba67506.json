{"ast":null,"code":"import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { SwitchLayoutGroupContext } from '../../context/SwitchLayoutGroupContext.mjs';\nlet scheduleHandoffComplete = false;\n\nfunction useVisualElement(Component, visualState, props, createVisualElement, ProjectionNodeConstructor) {\n  const {\n    visualElement: parent\n  } = useContext(MotionContext);\n  const lazyContext = useContext(LazyContext);\n  const presenceContext = useContext(PresenceContext);\n  const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n  const visualElementRef = useRef();\n  /**\n   * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n   */\n\n  createVisualElement = createVisualElement || lazyContext.renderer;\n\n  if (!visualElementRef.current && createVisualElement) {\n    visualElementRef.current = createVisualElement(Component, {\n      visualState,\n      parent,\n      props,\n      presenceContext,\n      blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,\n      reducedMotionConfig\n    });\n  }\n\n  const visualElement = visualElementRef.current;\n  /**\n   * Load Motion gesture and animation features. These are rendered as renderless\n   * components so each feature can optionally make use of React lifecycle methods.\n   */\n\n  const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n\n  if (visualElement && !visualElement.projection && ProjectionNodeConstructor && (visualElement.type === \"html\" || visualElement.type === \"svg\")) {\n    createProjectionNode(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig);\n  }\n\n  useInsertionEffect(() => {\n    visualElement && visualElement.update(props, presenceContext);\n  });\n  /**\n   * Cache this value as we want to know whether HandoffAppearAnimations\n   * was present on initial render - it will be deleted after this.\n   */\n\n  const wantsHandoff = useRef(Boolean(props[optimizedAppearDataAttribute] && !window.HandoffComplete));\n  useIsomorphicLayoutEffect(() => {\n    if (!visualElement) return;\n    visualElement.updateFeatures();\n    microtask.render(visualElement.render);\n    /**\n     * Ideally this function would always run in a useEffect.\n     *\n     * However, if we have optimised appear animations to handoff from,\n     * it needs to happen synchronously to ensure there's no flash of\n     * incorrect styles in the event of a hydration error.\n     *\n     * So if we detect a situtation where optimised appear animations\n     * are running, we use useLayoutEffect to trigger animations.\n     */\n\n    if (wantsHandoff.current && visualElement.animationState) {\n      visualElement.animationState.animateChanges();\n    }\n  });\n  useEffect(() => {\n    if (!visualElement) return;\n\n    if (!wantsHandoff.current && visualElement.animationState) {\n      visualElement.animationState.animateChanges();\n    }\n\n    if (wantsHandoff.current) {\n      wantsHandoff.current = false; // This ensures all future calls to animateChanges() will run in useEffect\n\n      if (!scheduleHandoffComplete) {\n        scheduleHandoffComplete = true;\n        queueMicrotask(completeHandoff);\n      }\n    }\n  });\n  return visualElement;\n}\n\nfunction completeHandoff() {\n  window.HandoffComplete = true;\n}\n\nfunction createProjectionNode(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig) {\n  const {\n    layoutId,\n    layout,\n    drag,\n    dragConstraints,\n    layoutScroll,\n    layoutRoot\n  } = props;\n  visualElement.projection = new ProjectionNodeConstructor(visualElement.latestValues, props[\"data-framer-portal-id\"] ? undefined : getClosestProjectingNode(visualElement.parent));\n  visualElement.projection.setOptions({\n    layoutId,\n    layout,\n    alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n    visualElement,\n\n    /**\n     * TODO: Update options in an effect. This could be tricky as it'll be too late\n     * to update by the time layout animations run.\n     * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n     * ensuring it gets called if there's no potential layout animations.\n     *\n     */\n    animationType: typeof layout === \"string\" ? layout : \"both\",\n    initialPromotionConfig,\n    layoutScroll,\n    layoutRoot\n  });\n}\n\nfunction getClosestProjectingNode(visualElement) {\n  if (!visualElement) return undefined;\n  return visualElement.options.allowProjection !== false ? visualElement.projection : getClosestProjectingNode(visualElement.parent);\n}\n\nexport { useVisualElement };","map":{"version":3,"sources":["C:/Users/74760/Desktop/VScode/React/Portfolio/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs"],"names":["useContext","useRef","useInsertionEffect","useEffect","PresenceContext","MotionContext","useIsomorphicLayoutEffect","LazyContext","MotionConfigContext","optimizedAppearDataAttribute","microtask","isRefObject","SwitchLayoutGroupContext","scheduleHandoffComplete","useVisualElement","Component","visualState","props","createVisualElement","ProjectionNodeConstructor","visualElement","parent","lazyContext","presenceContext","reducedMotionConfig","reducedMotion","visualElementRef","renderer","current","blockInitialAnimation","initial","initialLayoutGroupConfig","projection","type","createProjectionNode","update","wantsHandoff","Boolean","window","HandoffComplete","updateFeatures","render","animationState","animateChanges","queueMicrotask","completeHandoff","initialPromotionConfig","layoutId","layout","drag","dragConstraints","layoutScroll","layoutRoot","latestValues","undefined","getClosestProjectingNode","setOptions","alwaysMeasureLayout","animationType","options","allowProjection"],"mappings":"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","sourcesContent":["import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { SwitchLayoutGroupContext } from '../../context/SwitchLayoutGroupContext.mjs';\n\nlet scheduleHandoffComplete = false;\nfunction useVisualElement(Component, visualState, props, createVisualElement, ProjectionNodeConstructor) {\n    const { visualElement: parent } = useContext(MotionContext);\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef();\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    /**\n     * Load Motion gesture and animation features. These are rendered as renderless\n     * components so each feature can optionally make use of React lifecycle methods.\n     */\n    const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n    if (visualElement &&\n        !visualElement.projection &&\n        ProjectionNodeConstructor &&\n        (visualElement.type === \"html\" || visualElement.type === \"svg\")) {\n        createProjectionNode(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig);\n    }\n    useInsertionEffect(() => {\n        visualElement && visualElement.update(props, presenceContext);\n    });\n    /**\n     * Cache this value as we want to know whether HandoffAppearAnimations\n     * was present on initial render - it will be deleted after this.\n     */\n    const wantsHandoff = useRef(Boolean(props[optimizedAppearDataAttribute] &&\n        !window.HandoffComplete));\n    useIsomorphicLayoutEffect(() => {\n        if (!visualElement)\n            return;\n        visualElement.updateFeatures();\n        microtask.render(visualElement.render);\n        /**\n         * Ideally this function would always run in a useEffect.\n         *\n         * However, if we have optimised appear animations to handoff from,\n         * it needs to happen synchronously to ensure there's no flash of\n         * incorrect styles in the event of a hydration error.\n         *\n         * So if we detect a situtation where optimised appear animations\n         * are running, we use useLayoutEffect to trigger animations.\n         */\n        if (wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    useEffect(() => {\n        if (!visualElement)\n            return;\n        if (!wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n        if (wantsHandoff.current) {\n            wantsHandoff.current = false;\n            // This ensures all future calls to animateChanges() will run in useEffect\n            if (!scheduleHandoffComplete) {\n                scheduleHandoffComplete = true;\n                queueMicrotask(completeHandoff);\n            }\n        }\n    });\n    return visualElement;\n}\nfunction completeHandoff() {\n    window.HandoffComplete = true;\n}\nfunction createProjectionNode(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig) {\n    const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = props;\n    visualElement.projection = new ProjectionNodeConstructor(visualElement.latestValues, props[\"data-framer-portal-id\"]\n        ? undefined\n        : getClosestProjectingNode(visualElement.parent));\n    visualElement.projection.setOptions({\n        layoutId,\n        layout,\n        alwaysMeasureLayout: Boolean(drag) || (dragConstraints && isRefObject(dragConstraints)),\n        visualElement,\n        /**\n         * TODO: Update options in an effect. This could be tricky as it'll be too late\n         * to update by the time layout animations run.\n         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n         * ensuring it gets called if there's no potential layout animations.\n         *\n         */\n        animationType: typeof layout === \"string\" ? layout : \"both\",\n        initialPromotionConfig,\n        layoutScroll,\n        layoutRoot,\n    });\n}\nfunction getClosestProjectingNode(visualElement) {\n    if (!visualElement)\n        return undefined;\n    return visualElement.options.allowProjection !== false\n        ? visualElement.projection\n        : getClosestProjectingNode(visualElement.parent);\n}\n\nexport { useVisualElement };\n"]},"metadata":{},"sourceType":"module"}