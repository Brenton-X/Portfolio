{"ast":null,"code":"import { time } from '../../frameloop/sync-time.mjs';\nimport { DOMKeyframesResolver } from '../../render/dom/DOMKeyframesResolver.mjs';\nimport { memo } from '../../utils/memo.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { BaseAnimation } from './BaseAnimation.mjs';\nimport { MainThreadAnimation } from './MainThreadAnimation.mjs';\nimport { acceleratedValues } from './utils/accelerated-values.mjs';\nimport { animateStyle } from './waapi/index.mjs';\nimport { isWaapiSupportedEasing } from './waapi/easing.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\nconst supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\n\nconst sampleDelta = 10; //ms\n\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\n\nconst maxDuration = 20000;\n/**\n * Check if an animation can run natively via WAAPI or requires pregenerated keyframes.\n * WAAPI doesn't support spring or function easings so we run these as JS animation before\n * handing off.\n */\n\nfunction requiresPregeneratedKeyframes(options) {\n  return options.type === \"spring\" || !isWaapiSupportedEasing(options.ease);\n}\n\nfunction pregenerateKeyframes(keyframes, options) {\n  /**\n   * Create a main-thread animation to pregenerate keyframes.\n   * We sample this at regular intervals to generate keyframes that we then\n   * linearly interpolate between.\n   */\n  const sampleAnimation = new MainThreadAnimation({ ...options,\n    keyframes,\n    repeat: 0,\n    delay: 0,\n    isGenerator: true\n  });\n  let state = {\n    done: false,\n    value: keyframes[0]\n  };\n  const pregeneratedKeyframes = [];\n  /**\n   * Bail after 20 seconds of pre-generated keyframes as it's likely\n   * we're heading for an infinite loop.\n   */\n\n  let t = 0;\n\n  while (!state.done && t < maxDuration) {\n    state = sampleAnimation.sample(t);\n    pregeneratedKeyframes.push(state.value);\n    t += sampleDelta;\n  }\n\n  return {\n    times: undefined,\n    keyframes: pregeneratedKeyframes,\n    duration: t - sampleDelta,\n    ease: \"linear\"\n  };\n}\n\nclass AcceleratedAnimation extends BaseAnimation {\n  constructor(options) {\n    super(options);\n    const {\n      name,\n      motionValue,\n      keyframes\n    } = this.options;\n    this.resolver = new DOMKeyframesResolver(keyframes, (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe), name, motionValue);\n    this.resolver.scheduleResolve();\n  }\n\n  initPlayback(keyframes, finalKeyframe) {\n    var _a;\n\n    let {\n      duration = 300,\n      times,\n      ease,\n      type,\n      motionValue,\n      name\n    } = this.options;\n    /**\n     * If element has since been unmounted, return false to indicate\n     * the animation failed to initialised.\n     */\n\n    if (!((_a = motionValue.owner) === null || _a === void 0 ? void 0 : _a.current)) {\n      return false;\n    }\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n\n\n    if (requiresPregeneratedKeyframes(this.options)) {\n      const {\n        onComplete,\n        onUpdate,\n        motionValue,\n        ...options\n      } = this.options;\n      const pregeneratedAnimation = pregenerateKeyframes(keyframes, options);\n      keyframes = pregeneratedAnimation.keyframes; // If this is a very short animation, ensure we have\n      // at least two keyframes to animate between as older browsers\n      // can't animate between a single keyframe.\n\n      if (keyframes.length === 1) {\n        keyframes[1] = keyframes[0];\n      }\n\n      duration = pregeneratedAnimation.duration;\n      times = pregeneratedAnimation.times;\n      ease = pregeneratedAnimation.ease;\n      type = \"keyframes\";\n    }\n\n    const animation = animateStyle(motionValue.owner.current, name, keyframes, { ...this.options,\n      duration,\n      times,\n      ease\n    }); // Override the browser calculated startTime with one synchronised to other JS\n    // and WAAPI animations starting this event loop.\n\n    animation.startTime = time.now();\n\n    if (this.pendingTimeline) {\n      animation.timeline = this.pendingTimeline;\n      this.pendingTimeline = undefined;\n    } else {\n      /**\n       * Prefer the `onfinish` prop as it's more widely supported than\n       * the `finished` promise.\n       *\n       * Here, we synchronously set the provided MotionValue to the end\n       * keyframe. If we didn't, when the WAAPI animation is finished it would\n       * be removed from the element which would then revert to its old styles.\n       */\n      animation.onfinish = () => {\n        const {\n          onComplete\n        } = this.options;\n        motionValue.set(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n        onComplete && onComplete();\n        this.cancel();\n        this.resolveFinishedPromise();\n      };\n    }\n\n    return {\n      animation,\n      duration,\n      times,\n      type,\n      ease,\n      keyframes: keyframes\n    };\n  }\n\n  get duration() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return 0;\n    const {\n      duration\n    } = resolved;\n    return millisecondsToSeconds(duration);\n  }\n\n  get time() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return 0;\n    const {\n      animation\n    } = resolved;\n    return millisecondsToSeconds(animation.currentTime || 0);\n  }\n\n  set time(newTime) {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    const {\n      animation\n    } = resolved;\n    animation.currentTime = secondsToMilliseconds(newTime);\n  }\n\n  get speed() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return 1;\n    const {\n      animation\n    } = resolved;\n    return animation.playbackRate;\n  }\n\n  set speed(newSpeed) {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    const {\n      animation\n    } = resolved;\n    animation.playbackRate = newSpeed;\n  }\n\n  get state() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return \"idle\";\n    const {\n      animation\n    } = resolved;\n    return animation.playState;\n  }\n  /**\n   * Replace the default DocumentTimeline with another AnimationTimeline.\n   * Currently used for scroll animations.\n   */\n\n\n  attachTimeline(timeline) {\n    if (!this._resolved) {\n      this.pendingTimeline = timeline;\n    } else {\n      const {\n        resolved\n      } = this;\n      if (!resolved) return noop;\n      const {\n        animation\n      } = resolved;\n      animation.timeline = timeline;\n      animation.onfinish = null;\n    }\n\n    return noop;\n  }\n\n  play() {\n    if (this.isStopped) return;\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    const {\n      animation\n    } = resolved;\n\n    if (animation.playState === \"finished\") {\n      this.updateFinishedPromise();\n    }\n\n    animation.play();\n  }\n\n  pause() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    const {\n      animation\n    } = resolved;\n    animation.pause();\n  }\n\n  stop() {\n    this.resolver.cancel();\n    this.isStopped = true;\n    if (this.state === \"idle\") return;\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    const {\n      animation,\n      keyframes,\n      duration,\n      type,\n      ease,\n      times\n    } = resolved;\n\n    if (animation.playState === \"idle\" || animation.playState === \"finished\") {\n      return;\n    }\n    /**\n     * WAAPI doesn't natively have any interruption capabilities.\n     *\n     * Rather than read commited styles back out of the DOM, we can\n     * create a renderless JS animation and sample it twice to calculate\n     * its current value, \"previous\" value, and therefore allow\n     * Motion to calculate velocity for any subsequent animation.\n     */\n\n\n    if (this.time) {\n      const {\n        motionValue,\n        onUpdate,\n        onComplete,\n        ...options\n      } = this.options;\n      const sampleAnimation = new MainThreadAnimation({ ...options,\n        keyframes,\n        duration,\n        type,\n        ease,\n        times,\n        isGenerator: true\n      });\n      const sampleTime = secondsToMilliseconds(this.time);\n      motionValue.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);\n    }\n\n    const {\n      onStop\n    } = this.options;\n    onStop && onStop();\n    this.cancel();\n  }\n\n  complete() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    resolved.animation.finish();\n  }\n\n  cancel() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    resolved.animation.cancel();\n  }\n\n  static supports(options) {\n    const {\n      motionValue,\n      name,\n      repeatDelay,\n      repeatType,\n      damping,\n      type\n    } = options;\n    return supportsWaapi() && name && acceleratedValues.has(name) && motionValue && motionValue.owner && motionValue.owner.current instanceof HTMLElement &&\n    /**\n     * If we're outputting values to onUpdate then we can't use WAAPI as there's\n     * no way to read the value from WAAPI every frame.\n     */\n    !motionValue.owner.getProps().onUpdate && !repeatDelay && repeatType !== \"mirror\" && damping !== 0 && type !== \"inertia\";\n  }\n\n}\n\nexport { AcceleratedAnimation };","map":{"version":3,"sources":["C:/Users/74760/Desktop/VScode/React/Portfolio/node_modules/framer-motion/dist/es/animation/animators/AcceleratedAnimation.mjs"],"names":["time","DOMKeyframesResolver","memo","noop","millisecondsToSeconds","secondsToMilliseconds","BaseAnimation","MainThreadAnimation","acceleratedValues","animateStyle","isWaapiSupportedEasing","getFinalKeyframe","supportsWaapi","Object","hasOwnProperty","call","Element","prototype","sampleDelta","maxDuration","requiresPregeneratedKeyframes","options","type","ease","pregenerateKeyframes","keyframes","sampleAnimation","repeat","delay","isGenerator","state","done","value","pregeneratedKeyframes","t","sample","push","times","undefined","duration","AcceleratedAnimation","constructor","name","motionValue","resolver","resolvedKeyframes","finalKeyframe","onKeyframesResolved","scheduleResolve","initPlayback","_a","owner","current","onComplete","onUpdate","pregeneratedAnimation","length","animation","startTime","now","pendingTimeline","timeline","onfinish","set","cancel","resolveFinishedPromise","resolved","currentTime","newTime","speed","playbackRate","newSpeed","playState","attachTimeline","_resolved","play","isStopped","updateFinishedPromise","pause","stop","sampleTime","setWithVelocity","onStop","complete","finish","supports","repeatDelay","repeatType","damping","has","HTMLElement","getProps"],"mappings":"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","sourcesContent":["import { time } from '../../frameloop/sync-time.mjs';\nimport { DOMKeyframesResolver } from '../../render/dom/DOMKeyframesResolver.mjs';\nimport { memo } from '../../utils/memo.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { BaseAnimation } from './BaseAnimation.mjs';\nimport { MainThreadAnimation } from './MainThreadAnimation.mjs';\nimport { acceleratedValues } from './utils/accelerated-values.mjs';\nimport { animateStyle } from './waapi/index.mjs';\nimport { isWaapiSupportedEasing } from './waapi/easing.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\n\nconst supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\n/**\n * Check if an animation can run natively via WAAPI or requires pregenerated keyframes.\n * WAAPI doesn't support spring or function easings so we run these as JS animation before\n * handing off.\n */\nfunction requiresPregeneratedKeyframes(options) {\n    return options.type === \"spring\" || !isWaapiSupportedEasing(options.ease);\n}\nfunction pregenerateKeyframes(keyframes, options) {\n    /**\n     * Create a main-thread animation to pregenerate keyframes.\n     * We sample this at regular intervals to generate keyframes that we then\n     * linearly interpolate between.\n     */\n    const sampleAnimation = new MainThreadAnimation({\n        ...options,\n        keyframes,\n        repeat: 0,\n        delay: 0,\n        isGenerator: true,\n    });\n    let state = { done: false, value: keyframes[0] };\n    const pregeneratedKeyframes = [];\n    /**\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\n     * we're heading for an infinite loop.\n     */\n    let t = 0;\n    while (!state.done && t < maxDuration) {\n        state = sampleAnimation.sample(t);\n        pregeneratedKeyframes.push(state.value);\n        t += sampleDelta;\n    }\n    return {\n        times: undefined,\n        keyframes: pregeneratedKeyframes,\n        duration: t - sampleDelta,\n        ease: \"linear\",\n    };\n}\nclass AcceleratedAnimation extends BaseAnimation {\n    constructor(options) {\n        super(options);\n        const { name, motionValue, keyframes } = this.options;\n        this.resolver = new DOMKeyframesResolver(keyframes, (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe), name, motionValue);\n        this.resolver.scheduleResolve();\n    }\n    initPlayback(keyframes, finalKeyframe) {\n        var _a;\n        let { duration = 300, times, ease, type, motionValue, name, } = this.options;\n        /**\n         * If element has since been unmounted, return false to indicate\n         * the animation failed to initialised.\n         */\n        if (!((_a = motionValue.owner) === null || _a === void 0 ? void 0 : _a.current)) {\n            return false;\n        }\n        /**\n         * If this animation needs pre-generated keyframes then generate.\n         */\n        if (requiresPregeneratedKeyframes(this.options)) {\n            const { onComplete, onUpdate, motionValue, ...options } = this.options;\n            const pregeneratedAnimation = pregenerateKeyframes(keyframes, options);\n            keyframes = pregeneratedAnimation.keyframes;\n            // If this is a very short animation, ensure we have\n            // at least two keyframes to animate between as older browsers\n            // can't animate between a single keyframe.\n            if (keyframes.length === 1) {\n                keyframes[1] = keyframes[0];\n            }\n            duration = pregeneratedAnimation.duration;\n            times = pregeneratedAnimation.times;\n            ease = pregeneratedAnimation.ease;\n            type = \"keyframes\";\n        }\n        const animation = animateStyle(motionValue.owner.current, name, keyframes, { ...this.options, duration, times, ease });\n        // Override the browser calculated startTime with one synchronised to other JS\n        // and WAAPI animations starting this event loop.\n        animation.startTime = time.now();\n        if (this.pendingTimeline) {\n            animation.timeline = this.pendingTimeline;\n            this.pendingTimeline = undefined;\n        }\n        else {\n            /**\n             * Prefer the `onfinish` prop as it's more widely supported than\n             * the `finished` promise.\n             *\n             * Here, we synchronously set the provided MotionValue to the end\n             * keyframe. If we didn't, when the WAAPI animation is finished it would\n             * be removed from the element which would then revert to its old styles.\n             */\n            animation.onfinish = () => {\n                const { onComplete } = this.options;\n                motionValue.set(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n                onComplete && onComplete();\n                this.cancel();\n                this.resolveFinishedPromise();\n            };\n        }\n        return {\n            animation,\n            duration,\n            times,\n            type,\n            ease,\n            keyframes: keyframes,\n        };\n    }\n    get duration() {\n        const { resolved } = this;\n        if (!resolved)\n            return 0;\n        const { duration } = resolved;\n        return millisecondsToSeconds(duration);\n    }\n    get time() {\n        const { resolved } = this;\n        if (!resolved)\n            return 0;\n        const { animation } = resolved;\n        return millisecondsToSeconds(animation.currentTime || 0);\n    }\n    set time(newTime) {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.currentTime = secondsToMilliseconds(newTime);\n    }\n    get speed() {\n        const { resolved } = this;\n        if (!resolved)\n            return 1;\n        const { animation } = resolved;\n        return animation.playbackRate;\n    }\n    set speed(newSpeed) {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.playbackRate = newSpeed;\n    }\n    get state() {\n        const { resolved } = this;\n        if (!resolved)\n            return \"idle\";\n        const { animation } = resolved;\n        return animation.playState;\n    }\n    /**\n     * Replace the default DocumentTimeline with another AnimationTimeline.\n     * Currently used for scroll animations.\n     */\n    attachTimeline(timeline) {\n        if (!this._resolved) {\n            this.pendingTimeline = timeline;\n        }\n        else {\n            const { resolved } = this;\n            if (!resolved)\n                return noop;\n            const { animation } = resolved;\n            animation.timeline = timeline;\n            animation.onfinish = null;\n        }\n        return noop;\n    }\n    play() {\n        if (this.isStopped)\n            return;\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        if (animation.playState === \"finished\") {\n            this.updateFinishedPromise();\n        }\n        animation.play();\n    }\n    pause() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.pause();\n    }\n    stop() {\n        this.resolver.cancel();\n        this.isStopped = true;\n        if (this.state === \"idle\")\n            return;\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation, keyframes, duration, type, ease, times } = resolved;\n        if (animation.playState === \"idle\" ||\n            animation.playState === \"finished\") {\n            return;\n        }\n        /**\n         * WAAPI doesn't natively have any interruption capabilities.\n         *\n         * Rather than read commited styles back out of the DOM, we can\n         * create a renderless JS animation and sample it twice to calculate\n         * its current value, \"previous\" value, and therefore allow\n         * Motion to calculate velocity for any subsequent animation.\n         */\n        if (this.time) {\n            const { motionValue, onUpdate, onComplete, ...options } = this.options;\n            const sampleAnimation = new MainThreadAnimation({\n                ...options,\n                keyframes,\n                duration,\n                type,\n                ease,\n                times,\n                isGenerator: true,\n            });\n            const sampleTime = secondsToMilliseconds(this.time);\n            motionValue.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);\n        }\n        const { onStop } = this.options;\n        onStop && onStop();\n        this.cancel();\n    }\n    complete() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        resolved.animation.finish();\n    }\n    cancel() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        resolved.animation.cancel();\n    }\n    static supports(options) {\n        const { motionValue, name, repeatDelay, repeatType, damping, type } = options;\n        return (supportsWaapi() &&\n            name &&\n            acceleratedValues.has(name) &&\n            motionValue &&\n            motionValue.owner &&\n            motionValue.owner.current instanceof HTMLElement &&\n            /**\n             * If we're outputting values to onUpdate then we can't use WAAPI as there's\n             * no way to read the value from WAAPI every frame.\n             */\n            !motionValue.owner.getProps().onUpdate &&\n            !repeatDelay &&\n            repeatType !== \"mirror\" &&\n            damping !== 0 &&\n            type !== \"inertia\");\n    }\n}\n\nexport { AcceleratedAnimation };\n"]},"metadata":{},"sourceType":"module"}