{"ast":null,"code":"import { useConstant } from '../../utils/use-constant.mjs';\nimport { MotionValue } from '../index.mjs';\nimport { getWillChangeName } from './get-will-change-name.mjs';\nimport { removeItem } from '../../utils/array.mjs';\n\nclass WillChangeMotionValue extends MotionValue {\n  constructor() {\n    super(...arguments);\n    this.output = [];\n    this.counts = new Map();\n  }\n\n  add(name) {\n    const styleName = getWillChangeName(name);\n    if (!styleName) return;\n    /**\n     * Update counter. Each value has an indepdent counter\n     * as multiple sources could be requesting the same value\n     * gets added to will-change.\n     */\n\n    const prevCount = this.counts.get(styleName) || 0;\n    this.counts.set(styleName, prevCount + 1);\n\n    if (prevCount === 0) {\n      this.output.push(styleName);\n      this.update();\n    }\n    /**\n     * Prevents the remove function from being called multiple times.\n     */\n\n\n    let hasRemoved = false;\n    return () => {\n      if (hasRemoved) return;\n      hasRemoved = true;\n      const newCount = this.counts.get(styleName) - 1;\n      this.counts.set(styleName, newCount);\n\n      if (newCount === 0) {\n        removeItem(this.output, styleName);\n        this.update();\n      }\n    };\n  }\n\n  update() {\n    this.set(this.output.length ? this.output.join(\", \") : \"auto\");\n  }\n\n}\n\nfunction useWillChange() {\n  return useConstant(() => new WillChangeMotionValue(\"auto\"));\n}\n\nexport { WillChangeMotionValue, useWillChange };","map":{"version":3,"sources":["C:/Users/74760/Desktop/VScode/React/Portfolio/node_modules/framer-motion/dist/es/value/use-will-change/index.mjs"],"names":["useConstant","MotionValue","getWillChangeName","removeItem","WillChangeMotionValue","constructor","arguments","output","counts","Map","add","name","styleName","prevCount","get","set","push","update","hasRemoved","newCount","length","join","useWillChange"],"mappings":"AAAA,SAASA,WAAT,QAA4B,8BAA5B;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AACA,SAASC,UAAT,QAA2B,uBAA3B;;AAEA,MAAMC,qBAAN,SAAoCH,WAApC,CAAgD;AAC5CI,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,MAAL,GAAc,IAAIC,GAAJ,EAAd;AACH;;AACDC,EAAAA,GAAG,CAACC,IAAD,EAAO;AACN,UAAMC,SAAS,GAAGV,iBAAiB,CAACS,IAAD,CAAnC;AACA,QAAI,CAACC,SAAL,EACI;AACJ;AACR;AACA;AACA;AACA;;AACQ,UAAMC,SAAS,GAAG,KAAKL,MAAL,CAAYM,GAAZ,CAAgBF,SAAhB,KAA8B,CAAhD;AACA,SAAKJ,MAAL,CAAYO,GAAZ,CAAgBH,SAAhB,EAA2BC,SAAS,GAAG,CAAvC;;AACA,QAAIA,SAAS,KAAK,CAAlB,EAAqB;AACjB,WAAKN,MAAL,CAAYS,IAAZ,CAAiBJ,SAAjB;AACA,WAAKK,MAAL;AACH;AACD;AACR;AACA;;;AACQ,QAAIC,UAAU,GAAG,KAAjB;AACA,WAAO,MAAM;AACT,UAAIA,UAAJ,EACI;AACJA,MAAAA,UAAU,GAAG,IAAb;AACA,YAAMC,QAAQ,GAAG,KAAKX,MAAL,CAAYM,GAAZ,CAAgBF,SAAhB,IAA6B,CAA9C;AACA,WAAKJ,MAAL,CAAYO,GAAZ,CAAgBH,SAAhB,EAA2BO,QAA3B;;AACA,UAAIA,QAAQ,KAAK,CAAjB,EAAoB;AAChBhB,QAAAA,UAAU,CAAC,KAAKI,MAAN,EAAcK,SAAd,CAAV;AACA,aAAKK,MAAL;AACH;AACJ,KAVD;AAWH;;AACDA,EAAAA,MAAM,GAAG;AACL,SAAKF,GAAL,CAAS,KAAKR,MAAL,CAAYa,MAAZ,GAAqB,KAAKb,MAAL,CAAYc,IAAZ,CAAiB,IAAjB,CAArB,GAA8C,MAAvD;AACH;;AAvC2C;;AAyChD,SAASC,aAAT,GAAyB;AACrB,SAAOtB,WAAW,CAAC,MAAM,IAAII,qBAAJ,CAA0B,MAA1B,CAAP,CAAlB;AACH;;AAED,SAASA,qBAAT,EAAgCkB,aAAhC","sourcesContent":["import { useConstant } from '../../utils/use-constant.mjs';\nimport { MotionValue } from '../index.mjs';\nimport { getWillChangeName } from './get-will-change-name.mjs';\nimport { removeItem } from '../../utils/array.mjs';\n\nclass WillChangeMotionValue extends MotionValue {\n    constructor() {\n        super(...arguments);\n        this.output = [];\n        this.counts = new Map();\n    }\n    add(name) {\n        const styleName = getWillChangeName(name);\n        if (!styleName)\n            return;\n        /**\n         * Update counter. Each value has an indepdent counter\n         * as multiple sources could be requesting the same value\n         * gets added to will-change.\n         */\n        const prevCount = this.counts.get(styleName) || 0;\n        this.counts.set(styleName, prevCount + 1);\n        if (prevCount === 0) {\n            this.output.push(styleName);\n            this.update();\n        }\n        /**\n         * Prevents the remove function from being called multiple times.\n         */\n        let hasRemoved = false;\n        return () => {\n            if (hasRemoved)\n                return;\n            hasRemoved = true;\n            const newCount = this.counts.get(styleName) - 1;\n            this.counts.set(styleName, newCount);\n            if (newCount === 0) {\n                removeItem(this.output, styleName);\n                this.update();\n            }\n        };\n    }\n    update() {\n        this.set(this.output.length ? this.output.join(\", \") : \"auto\");\n    }\n}\nfunction useWillChange() {\n    return useConstant(() => new WillChangeMotionValue(\"auto\"));\n}\n\nexport { WillChangeMotionValue, useWillChange };\n"]},"metadata":{},"sourceType":"module"}